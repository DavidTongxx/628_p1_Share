install.packages("RCurl")
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
gapminder<-read.delim("http://www.stat.ubc.ca/~jenny/notOcto/STAT545A/examples/gapminder/data/gapminderDataFiveYear.txt")
View(gapminder)
Sys.setenv(LANGUAGE="en")
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
updateR()
source('~/.active-rstudio-document')
Sys.setenv(LANGUAGE="en")
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
0.25/12
library(showtext)
install.packages("showtext")
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
install.packages('animation')
install.packages('dplyr')
install.packages('ggplot2')
install.packages('xlsx')
install.packages('MASS')
install.packages('tree')
install.packages('randomForest')
install.packages('gridExtra')
install.packages('plyr')
.packages(TRUE)
normalizePath('~')
R_LIBS_USER="~/R"
list.files()
dir.create('~/R')
file.edit('~/.Rprofile')
R.home('bin')
?fortify
suppressPackageStartupMessages({
library(dplyr)
library(ggplot2)
library(xlsx)
library(MASS)
library(tree)
library(randomForest)
library(gridExtra)
})
?fortify
library(broom)
?tidy
install.packages("broman")
install.packages("devtools")
ng<- rbinom(1,400,0.488)
print(ng)
?rbinom
n<-1000
ng<- rep(NA,n)
for(s in 1:n){
ng[s]<-rbinom(1,400,.488)
}
hist(ng)
birth.type <- sample (c("fraternal twin","identical twin","single birth"),
size=400, replace=TRUE, prob=c(1/125, 1/300, 1 - 1/125 - 1/300))
girls <- rep (NA, 400)
for (i in 1:400){
if (birth.type[i]=="single birth"){
girls[i] <- rbinom (1, 1, .488)}
else if (birth.type[i]=="identical twin"){
girls[i] <- 2*rbinom (1, 1, .495)}
else if (birth.type[i]=="fraternal twin"){
girls[i] <- rbinom (1, 2, .495)}
}
n.girls <- sum (girls)
n.girls
n.girls <- rep (NA, n.sims)
for (s in 1:n.sims){
birth.type <-sample(c("fraternal twin","identical twin","single birth"),
size=400, replace=TRUE, prob=c(1/125, 1/300, 1 - 1/125 - 1/300))
girls <- rep (NA, 400)
for (i in 1:400){
if (birth.type[i]=="single birth"){
girls[i] <- rbinom (1, 1, .488)}
else if (birth.type[i]=="identical twin"){
girls[i] <- 2*rbinom (1, 1, .495)}
else if (birth.type[i]=="fraternal twin"){
girls[i] <- rbinom (1, 2, .495)}
}
}
n.sims <-1000
n.girls <- rep (NA, n.sims)
for (s in 1:n.sims){
birth.type <-sample(c("fraternal twin","identical twin","single birth"),
size=400, replace=TRUE, prob=c(1/125, 1/300, 1 - 1/125 - 1/300))
girls <- rep (NA, 400)
for (i in 1:400){
if (birth.type[i]=="single birth"){
girls[i] <- rbinom (1, 1, .488)}
else if (birth.type[i]=="identical twin"){
girls[i] <- 2*rbinom (1, 1, .495)}
else if (birth.type[i]=="fraternal twin"){
girls[i] <- rbinom (1, 2, .495)}}
}
hist(n.girls)
n.girls
n.sims <-1000
n.girls <- rep (NA, n.sims)
for (s in 1:n.sims){
birth.type <-sample(c("fraternal twin","identical twin","single birth"),
size=400, replace=TRUE, prob=c(1/125, 1/300, 1 - 1/125 - 1/300))
girls <- rep (NA, 400)
for (i in 1:400){
if (birth.type[i]=="single birth"){
girls[i] <- rbinom (1, 1, .488)}
else if (birth.type[i]=="identical twin"){
girls[i] <- 2*rbinom (1, 1, .495)}
else if (birth.type[i]=="fraternal twin"){
girls[i] <- rbinom (1, 2, .495)}
}
n.girls[s] <- sum (girls)
}
hist(n.girls)
setwd("E:/0 Prog files/1R/679_multi-level/hw2")
suppressPackageStartupMessages({
library(dplyr)
library(ggplot2)
library(arm)
library(gridExtra)
library(broom)
library(popbio)
library(AER) #test overdispersion
})
cancer_dat = read.table("cancer.txt",header=TRUE)
ggplot(cancer_dat,aes(x=factor(BNucl),fill=Class) ) +
geom_bar(position = "fill")+
ggtitle("maglignant and benign tumors for each BNucl")
fit_1b0<- glm(Class ~ 1, data=cancer_dat, family=binomial())
fit_1b1<- glm(Class ~ BNucl, data=cancer_dat, family=binomial())
fit_1b2<- glm(Class ~ BNucl+I(BNucl^2), data=cancer_dat, family=binomial())
fit_1b3<- glm(Class ~ factor(BNucl), data=cancer_dat, family=binomial())
anova(fit_1b0,fit_1b1,fit_1b2,fit_1b3)
x <- predict(fit_1b1)
y <- resid(fit_1b1)
binnedplot(x,y,main="Binned residual plot for model 1")
x <- predict(fit_1b2)
y <- resid(fit_1b2)
binnedplot(x,y,main="Binned residual plot for model 2")
x <- predict(fit_1b3)
y <- resid(fit_1b3)
binnedplot(x,y,main="Binned residual plot for model 3")
cancer_dat$Class2<- ifelse(cancer_dat$Class=="benign",0,1)
jitter.binary <- function(a, jitt=.1){
ifelse (a==0, runif (length(a), 0, jitt), runif (length(a), 1-jitt, 1))
}
switch.jitter <- jitter.binary (cancer_dat$Class2)
plot (cancer_dat$BNucl, switch.jitter)
curve (invlogit (coef(fit_1b2)[1] + coef(fit_1b2)[2]*x+coef(fit_1b2)[3]*x*x),
add=TRUE,col="#56B4E9")
all_combines <-t(combn(9,2))+1
BO6 <- function(index){
x1<-cancer_dat[,index[1]]
x2<-cancer_dat[,index[2]]
y <-cancer_dat$Class
#glance( fit ) [6] return deviance of the model
f1<-glance(glm(y ~ x1, family=binomial(link="logit")) )[6]
f2<-glance(glm(y ~ x1+I(x1^2), family=binomial(link="logit")) )[6]
f3<-glance(glm(y ~ x2, family=binomial(link="logit"))  )[6]
f4<-glance(glm(y ~ x2+I(x2^2), family=binomial(link="logit"))  )[6]
f5<-glance(glm(y ~ x1+x2, family=binomial(link="logit"))   )[6]
f6<-glance(glm(y ~ x1+x2+I(x1*x2), family=binomial(link="logit"))  )[6]
localdev <- as.numeric(c(f1,f2,f3,f4,f5,f6))
index <- which.min(localdev)
return(c(localdev[index],index))
}
result_mat <- data.frame( matrix(rep(0,72),nrow=36,ncol=2,byrow=TRUE))
names(result_mat) <- c("Deviance","Index")
for(i in 1:36){
result_mat[i,]<- BO6(all_combines[i,])
}
#find the minimum
result_mat[which.min(result_mat[,1]),]
names(cancer_dat)[all_combines[15,]]
fit_1d <- glm(Class2 ~ BNucl+USize+I(BNucl*USize),data=cancer_dat,
family=binomial(link="logit"))
jitter.binary <- function(a, jitt=.1){
ifelse (a==0, runif (length(a), 0, jitt), runif (length(a), 1-jitt, 1))
}
switch.jitter <- jitter.binary (cancer_dat$Class2)
plot (cancer_dat$BNucl, switch.jitter,main="Prob. of malignancy versus BNucl")
curve (invlogit (coef(fit_1d)[1] + coef(fit_1d)[2]*x+
coef(fit_1d)[3]*min(cancer_dat$USize)+
coef(fit_1d)[4]*min(cancer_dat$USize)*x ),
add=TRUE,col="red")
curve (invlogit (coef(fit_1d)[1] + coef(fit_1d)[2]*x+
coef(fit_1d)[3]*mean(cancer_dat$USize)+
coef(fit_1d)[4]*mean(cancer_dat$USize)*x ),
add=TRUE,col="green")
curve (invlogit (coef(fit_1d)[1] + coef(fit_1d)[2]*x+
coef(fit_1d)[3]*max(cancer_dat$USize)+
coef(fit_1d)[4]*max(cancer_dat$USize)*x ),
add=TRUE,col="blue")
plot (cancer_dat$USize, switch.jitter,main="Prob. of malignancy versus USize")
curve (invlogit (coef(fit_1d)[1] + coef(fit_1d)[2]*x+
coef(fit_1d)[3]*min(cancer_dat$BNucl)+
coef(fit_1d)[4]*min(cancer_dat$BNucl)*x ),
add=TRUE,col="red")
curve (invlogit (coef(fit_1d)[1] + coef(fit_1d)[2]*x+
coef(fit_1d)[3]*mean(cancer_dat$BNucl)+
coef(fit_1d)[4]*mean(cancer_dat$BNucl)*x ),
add=TRUE,col="green")
curve (invlogit (coef(fit_1d)[1] + coef(fit_1d)[2]*x+
coef(fit_1d)[3]*max(cancer_dat$BNucl)+
coef(fit_1d)[4]*max(cancer_dat$BNucl)*x ),
add=TRUE,col="blue")
predict(fit_1d)
invlogit = function(x) 1/(1+exp(-x))
invlogit(predict(fit_1d))
range(invlogit(predict(fit_1d)))
prob_fit1d <-invlogit(predict(fit_1d))
error_rate <- mean((prob_fit1d>0.5 & cancer_dat$Class2==0) |
(prob_fit1d<0.5 & cancer_dat$Class2==1)  )
(prob_fit1d>0.5 & cancer_dat$Class2==0) |
(prob_fit1d<0.5 & cancer_dat$Class2==1)
sum((prob_fit1d>0.5 & cancer_dat$Class2==0) |
(prob_fit1d<0.5 & cancer_dat$Class2==1) )
27/681
suppressPackageStartupMessages({
library(png)
library(ggplot2)
library(gridExtra)
})
setwd("C:/Users/myuser/Desktop/628/PartA")
load("air_all.Rda")
air_0 <-air_all[air_all$Hour==0,]
air_8 <-air_all[air_all$Hour==8,]
air_12 <-air_all[air_all$Hour==12,]
air_18 <-air_all[air_all$Hour==18,]
```
p_air0<-ggplot(data = air_0, aes(x=Days,y = Value,color = Site)) + geom_line() +
geom_point() + ggtitle("Hour 0")
p_air8<-ggplot(data = air_8, aes(x=Days,y = Value,color = Site)) + geom_line() +
geom_point() + ggtitle("Hour 8")
p_air12<-ggplot(data = air_12, aes(x=Days,y = Value,color = Site)) + geom_line() +
geom_point() + ggtitle("Hour 12")
p_air18<-ggplot(data = air_18, aes(x=Days,y = Value,color = Site)) + geom_line() +
geom_point() + ggtitle("Hour 18")
grid.arrange(p_air0,p_air8,p_air12, p_air18, ncol=2,nrow=2)
air_all <-air_all[air_all$Value!=-999,]
air_0 <-air_all[air_all$Hour==0,]
air_8 <-air_all[air_all$Hour==8,]
air_12 <-air_all[air_all$Hour==12,]
air_18 <-air_all[air_all$Hour==18,]
p_air0<-ggplot(data = air_0, aes(x=Days,y = Value,color = Site)) + geom_line() +
geom_point() + ggtitle("Hour 0")
p_air8<-ggplot(data = air_8, aes(x=Days,y = Value,color = Site)) + geom_line() +
geom_point() + ggtitle("Hour 8")
p_air12<-ggplot(data = air_12, aes(x=Days,y = Value,color = Site)) + geom_line() +
geom_point() + ggtitle("Hour 12")
p_air18<-ggplot(data = air_18, aes(x=Days,y = Value,color = Site)) + geom_line() +
geom_point() + ggtitle("Hour 18")
grid.arrange(p_air0,p_air8,p_air12, p_air18, ncol=2,nrow=2)
p1<-ggplot(data = air_0[air_0$Days <51,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+
geom_smooth()+ ggtitle("Hour 0 (no line)")
p2<-ggplot(data = air_8[air_8$Days <51,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+
geom_smooth()+ ggtitle("Hour 8 (no line)")
p3<-ggplot(data = air_12[air_12$Days <51,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+
geom_smooth()+ ggtitle("Hour 12 (no line)")
p4<-ggplot(data = air_0[air_18$Days <51,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+
geom_smooth()+ ggtitle("Hour 18 (no line)")
grid.arrange(p1,p2,p3,p4, ncol=2,nrow=2)
ggplot(data = air_0[air_0$Days <51,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+ facet_wrap(~Site)
geom_smooth()+ ggtitle("Hour 0 (no line)")
ggplot(data = air_0[air_0$Days <51,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+ facet_wrap(Site)
geom_smooth()+ ggtitle("Hour 0 (no line)")
ggplot(data = air_0[air_0$Days <51,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+ facet_wrap(.Site)
ggplot(data = air_0[air_0$Days <51,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+ facet_wrap(Site)+
geom_smooth()+ ggtitle("Hour 0 (no line)")
ggplot(data = air_0[air_0$Days <51,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+ facet_wrap(~Site)+
geom_smooth()+ ggtitle("Hour 0 (no line)")
ggplot(data = air_all,
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+ facet_wrap(~Site)+
geom_smooth()+ ggtitle("Hour 0 Separated(with CI)")
ggplot(data = air_all,
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+ facet_wrap(~Site)+
ggtitle("24 Hour Separated")
p1<-ggplot(data = air_0[air_0$Days <150 &air_0$Days >100,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+
geom_smooth(se = FALSE)+ ggtitle("Hour 0 (no line)")
p2<-ggplot(data = air_8[air_8$Days <150 &air_8$Days >100,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+
geom_smooth(se = FALSE)+ ggtitle("Hour 8 (no line)")
p3<-ggplot(data = air_12[air_12$Days <150 &air_12$Days >100,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+
geom_smooth(se = FALSE)+ ggtitle("Hour 12 (no line)")
p4<-ggplot(data = air_0[air_18$Days <150 &air_18$Days >100,],
aes(x=Days,y = Value,color = Site))+
geom_point(aes(shape = Site ) )+
geom_smooth(se = FALSE)+ ggtitle("Hour 18 (no line)")
grid.arrange(p1,p2,p3,p4, ncol=2,nrow=2)
?grid.arrange
setwd("C:/Users/myuser/Desktop/628/p1/Synthesis")
