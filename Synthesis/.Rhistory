}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating, count=actorsFlatCount)
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actorsFlatRating = aggregate(actors.df, by=list(actor), FUN=mean)
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actorsFlatRating = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
actorsFlat = table(actorsFlat)
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actorsFlatRating = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
actorsFlat = table(actorsFlat)
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actors.df = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
}
actorsFlatCount = aggregate(actorsFlat, by=list(actors.df$actor), FUN=length)
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actors.df = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
}
actorsFlatCount = aggregate(actorsFlat, by=list(actorsFlat), FUN=length)
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actors.df = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
}
actorsFlatCount = aggregate(actorsFlat, by=list(actorsFlat), FUN=length)/2
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actors.df = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
}
actorsFlatCount = aggregate(actorsFlat, by=list(actorsFlat), FUN=length)
actorsFlatCount[,2] = actorsFlatCount[,2]/2
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actors.df = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
}
actorsFlatCount = aggregate(actorsFlat, by=list(actorsFlat), FUN=length)
actorsFlatCount[,2] = actorsFlatCount[,2]/2
actors.df = data.frame(actor=actors.df[,1], rating=actors.df[,2], count=actorsFlatCount[,2])
actors.df=order(actors.df, by=actors.df[3], decreasing=TRUE)
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actors.df = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
}
actorsFlatCount = aggregate(actorsFlat, by=list(actorsFlat), FUN=length)
actorsFlatCount[,2] = actorsFlatCount[,2]/2
actors.df = data.frame(actor=actors.df[,1], rating=actors.df[,2], count=actorsFlatCount[,2])
actors.df=actors.df[order(actors.df[1], by=actors.df[3], decreasing=TRUE),]
print(actors.df[1:10,])
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actors.df = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
}
actorsFlatCount = aggregate(actorsFlat, by=list(actorsFlat), FUN=length)
actorsFlatCount[,2] = actorsFlatCount[,2]/2
actors.df = data.frame(actor=actors.df[,1], rating=actors.df[,2], count=actorsFlatCount[,2])
actors.df=actors.df[order(actors.df[3], by=actors.df[3], decreasing=TRUE),]
print(actors.df[1:10,])
options(stringsAsFactors=FALSE)
actorsFlat = c()
actorsFlatRating = numeric()
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
actorsFlatRating = c(actorsFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actors.df = data.frame(actor=actorsFlat, rating=actorsFlatRating)
actors.df = aggregate(actors.df$rating, by=list(actors.df$actor), FUN=mean)
for(i in 1:length(actors))
{
actorsFlat = c(actorsFlat, actors[[i]])
}
actorsFlatCount = aggregate(actorsFlat, by=list(actorsFlat), FUN=length)
actorsFlatCount[,2] = actorsFlatCount[,2]/2
actors.df = data.frame(actor=actors.df[,1], rating=actors.df[,2], count=actorsFlatCount[,2])
actors.df=actors.df[order(actors.df[3], by=actors.df[3], decreasing=TRUE),]
print(actors.df[1:10,])
actors.df=actors.df[order(actors.df[2], by=actors.df[2], decreasing=TRUE),]
print(actors.df[1:10,])
directors.df = data.frame(director=directors, rating=ratings)
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=list(directors), FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df=directors.df[order(directors.df[2], by=directors.df[2], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df = data.frame(director=directors, rating=ratings)
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=list(directors), FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
directors.df = data.frame(director=directors, rating=ratings)
View(directors.df)
View(directors.df)
directors.df = data.frame(directors, ratings)
directors.df = data.frame(unlist(directors), unlist(ratings))
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=list(directors), FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
directors.df=directors.df[order(directors.df[2], by=directors.df[2], decreasing=TRUE),]
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=directors, FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=directors, FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
directors.df=directors.df[order(directors.df[2], by=directors.df[2], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(directors, by=directors, FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
print(directors.df[1:10,])
View(directorCount)
View(directorCount)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=unlist(directors), FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df=directors.df[order(directors.df[2], by=directors.df[2], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=list(directors.df$director), FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=directors.df$director, FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=directors, FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = aggregate(unlist(directors), by=list(directors), FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = data.frame(director=unlist(directors))
directorCount = aggregate(directorCount$director, by=directorCount$director, FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = data.frame(director=unlist(directors))
directorCount = aggregate(directorCount[1], by=directorCount[1], FUN=length)
directors.df = data.frame(director=unlist(directors), rating=unlist(ratings))
directors.df = aggregate(directors.df$rating, by=list(directors.df$director), FUN=mean)
directorCount = data.frame(director=unlist(directors))
directorCount = aggregate(directorCount[1], by=directorCount[1], FUN=length)
directors.df = data.frame(director=directors.df[,1], rating=directors.df[,2], count=directorCount[,2])
directors.df=directors.df[order(directors.df[3], by=directors.df[3], decreasing=TRUE),]
print(directors.df[1:10,])
directors.df=directors.df[order(directors.df[2], by=directors.df[2], decreasing=TRUE),]
print(directors.df[1:10,])
options(stringsAsFactors=FALSE)
actorsDirFlat = c()
actorsDirFlatRating = numeric()
for(i in 1:length(actors)) {
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
actorsDirFlatRating = c(actorsDirFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDIr.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDir.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
options(stringsAsFactors=FALSE)
actorsDirFlat = c()
actorsDirFlatRating = numeric()
for(i in 1:length(actors)) {
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
actorsDirFlatRating = c(actorsDirFlatRating, rep(ratings[i], times=length(actors[[i]])))
}
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDir.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
options(stringsAsFactors=FALSE)
actorsDirFlat = c()
actorsDirFlatRating = numeric()
for(i in 1:length(actors)) {
for(j in 1:length(actors[[i]])) {
if(!is.na(actors[[i]][j])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
actorsDirFlatRating = c(actorsDirFlatRating, ratings[i])
}
}
}
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDir.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
options(stringsAsFactors=FALSE)
actorsDirFlat = c()
actorsDirFlatRating = numeric()
for(i in 1:length(actors)) {
for(j in 1:length(actors[[i]])) {
if(!is.na(actors[[i]][j])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
actorsDirFlatRating = c(actorsDirFlatRating, ratings[i])
}
}
}
actorsDir.df = data.frame(actorDir=actorsDirFlat, rating=actorsDirFlatRating)
actorsDir.df = aggregate(actorsDir.df$rating, by=list(actorsDir.df$actorDir), FUN=mean)
for(i in 1:length(actors))
{
for(j in 1:length(actors[[i]])) {
if(!is.na(actors[[i]][j])) {
adString = paste(sep=",",directors[i],actors[[i]][j])
actorsDirFlat = c(actorsDirFlat, adString)
}
}
}
actorsDirFlatCount = aggregate(actorsDirFlat, by=list(actorsDirFlat), FUN=length)
actorsDirFlatCount[,2] = actorsDirFlatCount[,2]/2
actorsDir.df = data.frame(actor=actorsDir.df[,1], rating=actorsDir.df[,2], count=actorsDirFlatCount[,2])
actorsDir.df=actorsDir.df[order(actorsDir.df[3], by=actorsDir.df[3], decreasing=TRUE),]
print(actorsDir.df[1:10,])
actorsDir.df=actorsDir.df[order(actorsDir.df[2], by=actorsDir.df[2], decreasing=TRUE),]
print(actorsDir.df[1:10,])
out = lm(ratings ~ years)
print(summary(out))
years = as.numeric(years)
out = lm(ratings ~ years)
print(summary(out))
plot(out)
out = lm(numVotes ~ years)
print(summary(out))
plot(out)
plot(out)$2
plot(out)[2]
out = lm(sqrt(numVotes) ~ sqrt(years))
print(summary(out))
plot(out)
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(out)
out = lm(ratings ~ years)
print(summary(out))
out = lm(ratings ~ years + numVotes + years*numVotes)
print(summary(out))
print(anova(out))
plot(out)
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ yearsStd + votesStd + yearsStd*votesStd)
print(summary(out))
print(anova(out))
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd +yearsStd + yearsStd*votesStd)
print(summary(out))
print(anova(out))
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd + yearsStd*votesStd + yearsStd )
print(summary(out))
print(anova(out))
mapply(sum, 1:4, 5:8, 9:12)
sapply(mtcars, FUN=mean)
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd + yearsStd*votesStd + yearsStd )
print(summary(out))
print(anova(out))
plot(out)
out = lm(ratings ~ years)
print(summary(out))
plot(out)
out = lm(faithful$waiting ~ faithful$eruptions)
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method="lm", se=FALSE)
# Part 2: ggplot2 graphics
Use `ggplot2` to solve make several graphs. First, here's code to load, or install and load, the package.
```{r}
if (!require("ggplot2")) {
install.packages("ggplot2")
stopifnot(require("ggplot2"))
}
```
1. Consider the built-in data set `warpbreaks`. (See `?warpbreaks`, http://en.wikipedia.org/wiki/Warp_%28weaving%29, and http://en.wikipedia.org/wiki/Power_loom#Operation.) Make a histogram of the numbers of warp breaks.
```{r}
ggplot(data=warpbreaks, aes(x = breaks)) + geom_histogram()
```
2. Make a density plot of the numbers of warp breaks.
```{r}
ggplot(data=warpbreaks, aes(x = breaks)) + geom_density()
```
3. Make two density plots of warp breaks, using a different color for each wool type, on a single panel. Does the wool type have a strong effect on the number of breaks?
```{r}
ggplot(data=warpbreaks, aes(x = breaks, color=factor(wool))) + geom_density()
```
4. Make three density plots of warp breaks, using a different color for each tension level, on a single panel. How does tension seem to affect the number of breaks?
```{r}
ggplot(data=warpbreaks, aes(x = breaks, color=factor(tension))) + geom_density()
```
5. "Old Faithful" is a geyser in Yellowstone National Park that erupts on a remarkably regular schedule (http://en.wikipedia.org/wiki/Old_Faithful). Make a scatterplot of waiting time ($y$) vs. most recent eruption time ($x)$ from the built-in `faithful` data set. (See `?faithful`.) Include a simple linear regression line. What is the most striking feature of this plot?
```{r}
out = lm(faithful$waiting ~ faithful$eruptions)
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method="lm", se=FALSE)
```
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method=c("lm"), se=FALSE)
out = lm(faithful$waiting ~ faithful$eruptions)
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method=c("lm"), se=FALSE)
?faithful
out = lm(faithful$waiting ~ faithful$eruptions)
ggplot(data=faithful, aes(x = eruptions, y = waiting)) + geom_point() + stat_smooth(method=c("lm"), se=FALSE)
ggplot(data=warpbreaks, aes(x = breaks, color=factor(tension))) + geom_density()
ggplot(data=warpbreaks, aes(x = breaks, color=factor(wool))) + geom_density()
out = lm(numVotes ~ years)
print(summary(out))
plot(numVotes ~ years)
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(log(numVotes) ~ log(years))
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd + yearsStd + yearsStd*votesStd  )
print(summary(out))
print(anova(out))
plot(fitted(out), resid(out))
for(i in 1:250) {
}
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(log(numVotes) ~ log(years))
index = identify(area$farm, area$land, tolerance = 5)
yearsStd = (years - mean(years))/sd(years)
votesStd = (numVotes - mean(numVotes))/sd(numVotes)
out = lm(ratings ~ votesStd + yearsStd + yearsStd*votesStd  )
print(summary(out))
print(anova(out))
plot(fitted(out), resid(out))
index = identify(area$farm, area$land, tolerance = 5)
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(log(numVotes) ~ log(years))
index = identify(y=log(numVotes), x=log(years), tolerance = 5)
out = lm(log(numVotes) ~ log(years))
print(summary(out))
plot(log(numVotes) ~ log(years))
index = identify(y=log(numVotes), x=log(years), tolerance = 5)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/628_p1_Share/Synthesis")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
